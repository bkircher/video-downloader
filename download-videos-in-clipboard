#!/usr/bin/env python3

"""Download all URLs in clipboard with youtube-dl."""

import sys
import os
import os.path
import subprocess
import signal
import copy


class SubprocessError(Exception):

    """Error raised when a command returned a non-zero exit code."""

    pass


def execute(command):
    """Execute given command and print it's output.

    Execute command, printing it and it's output to stdout as it goes. Raises
    SubprocessError whenever command returns a non-zero exit code.

    """
    print(command)
    process = subprocess.Popen(command,
                               shell=True,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)

    chunk = b''
    while True:
        current = process.stdout.read(1)
        if current == b'' and process.poll() is not None:
            break

        # Clear to end of line with ANSI escape sequence before writing to
        # stdout
        sys.stdout.write("\033[K")

        try:
            message = current.decode("utf-8")
        except UnicodeDecodeError:
            chunk = chunk + current
            try:
                message = chunk.decode("utf-8")
                chunk = b''
            except UnicodeDecodeError:
                continue

        sys.stdout.write(message)
        sys.stdout.flush()

    output = process.communicate()[0]
    exit_code = process.returncode

    if exit_code == 0:
        return output
    else:
        raise SubprocessError("'{}' failed".format(command))


def user_confirm(message, downloads):
    """Ask user whether to continue."""
    print(message)

    n = 1
    for download in downloads:
        print("{}: {}".format(n, download))
        n = n + 1

    print("Do you want to proceed? [yes/no]")
    proceed = input()
    if proceed in ("y", "yes", "Y", "Yes", "YES"):
        return downloads

    return set()


def get_clipboard_contents():
    """Platform-specific code for getting contents from clipboard."""
    result = set()

    if sys.platform == "linux":
        # Get entries from KDE4/klipper
        # import dbus
        # bus = dbus.SessionBus()
        # obj = bus.get_object("org.kde.klipper", "/klipper")
        # raw_history = obj.getClipboardHistoryMenu()
        # for item in raw_history:
        #     if item.startswith("http"):
        #         result.add(item)

        # Get entries from GNOME/gpaste
        raw_history = subprocess.check_output(["/usr/bin/gpaste-client",
            "history",
            "--raw",
            "--oneline"])
        history = raw_history.decode("utf-8")
        for item in history.split("\n"):
            if len(item) is not 0:
                if item.startswith("http"):
                    result.add(item)

    elif sys.platform == "darwin":
        # Following the old code used on Mac OS X to deal with plist files.

        from tempfile import gettempdir
        import atexit
        import plistlib
        from shutil import copy

        clips_file = os.path.expanduser(
            "~/Library/Application Support/ClipMenu/clips.data")

        # Make a copy of the clips and convert it from a binary plist to text
        tmpdir = gettempdir()
        copy(clips_file, tmpdir)
        clips_file_copy = os.path.join(tmpdir, os.path.basename(clips_file))

        def remove_temp_file():
            """Delete the temp file when the script finishes."""
            os.remove(clips_file_copy)

        atexit.register(remove_temp_file)

        converted = subprocess.call(
            ["plutil", "-convert", "xml1", clips_file_copy])
        if converted != 0:
            print("Couldn't convert clips plist to xml format")
            sys.exit(converted)

        plist = plistlib.readPlist(clips_file_copy)
        for item in plist["$objects"]:
            if type(item) is str:
                if item.startswith("http"):
                    result.add(item)

    return result


def main():
    xdg_data_home = os.getenv("XDG_DATA_HOME")
    if not xdg_data_home:
        print("Environment variable not set: XDG_DATA_HOME")
        sys.exit(1)

    data_dir = os.path.join(xdg_data_home, "video-downloader")
    data_file = os.path.join(data_dir, "resume.txt")
    resume_set = set()
    download_set = set()

    def signal_handler(signal, frame):
        print("\nInterrupted; stopping gracefully...")
        if len(resume_set) == 0:
            # Nothing to remember
            sys.exit(0)

        if not os.path.isdir(data_dir):
            os.mkdir(data_dir, mode=0o775)

        with open(data_file, "w") as f:
            for url in resume_set:
                f.write("{}\n".format(url))

        sys.exit(0)


    if os.path.isfile(data_file):
        # Might have crashed or interrupted, try to recover
        with open(data_file, "rb") as f:
            lines = f.readlines()
            for line in lines:
                item = line.decode("utf-8").strip()
                if item.startswith("http"):
                    download_set.add(item)
        os.unlink(data_file)

    signal.signal(signal.SIGINT, signal_handler)

    if len(download_set) > 0:
        # Resume?
        download_set = user_confirm("Resume downloading URLs:", download_set)
        if len(download_set) == 0:
            sys.exit(0)
    else:
        download_set = get_clipboard_contents()
        if len(download_set) == 0:
            sys.exit(0)
        download_set = user_confirm("Found following URLs in clipboard:",
            download_set)

    resume_set = copy.deepcopy(download_set)
    for url in download_set:
        try:
            execute("youtube-dl -ct {}".format(url))
        except SubprocessError as exc:
            print(exc)
            continue
        resume_set.discard(url)


if __name__ == "__main__":
    main()
